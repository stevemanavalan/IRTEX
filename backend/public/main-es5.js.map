{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/uploadservice.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","uploadservice","formBuilder","httpClient","title","file","imgNameList","jsonImageObj","queryId","uploadedImages","addinputValue","description","resultsCount","formData","FormData","append","uploadForm","get","value","imageForm","runscript","subscribe","res","matchedImages","body","console","log","headers","JSON","parse","toString","i","length","push","name","group","event","target","files","setValue","formRepoImage","uploadImage","err","item","queryImage","qId","persistQueryObj","color","chart","plotBackgroundColor","plotBorderWidth","plotShadow","type","text","tooltip","pointFormat","plotOptions","pie","allowPointSelect","cursor","dataLabels","enabled","format","series","colorByPoint","undefined","data","y","parseFloat","sliced","selected","fg","fileChange","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","UploadserviceService","http","post","observe","responseType","repoImg","qid","queryRepoList","providedIn","environment","production","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { UploadserviceService } from './uploadservice.service';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport * as HighCharts from 'highcharts';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  title = 'Image Search';\n  file = {};\n  imgNameList = [];\n  jsonImageObj = [];\n  uploadForm: FormGroup;\n  imageForm;\n  queryId = '';\n  resultsCount : number;\n  uploadedImages : Array<string> = [];\n  addinputValue: string = \"\";\n  description: string = \"\";\n  constructor(private uploadservice:UploadserviceService,private formBuilder: FormBuilder, private httpClient: HttpClient){}\n  runscript(){\n    this.resultsCount = 0;\n    this.imgNameList = []\n    const formData = new FormData();\n    formData.append('file', this.uploadForm.get('file').value);\n    this.imageForm = this.uploadForm.get('file').value;\n    this.uploadservice.runscript(formData).subscribe(res =>{\n      this.jsonImageObj = [];\n      var matchedImages = res.body;\n      console.log(res.headers.get('qId'));\n      this.queryId = res.headers.get('qId');\n      this.jsonImageObj = JSON.parse(matchedImages.toString());\n      for (var i = 0; i < this.jsonImageObj.length; i++) {\n        this.imgNameList.push(this.jsonImageObj[i].name);\n      }\n      \n      this.resultsCount = this.imgNameList.length;\n    })\n  }\n  ngOnInit() {\n    this.uploadForm = this.formBuilder.group({\n      file: ['']\n    });\n  }\n  fileChange(event) {\n    this.uploadedImages = []\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      //addinputValue: string = \"\"\n      this.uploadForm.get('file').setValue(file);\n      this.uploadedImages.push(file.name);\n     }\n  }\n  upload(){\n    const formRepoImage = new FormData();\n    formRepoImage.append('file', this.uploadForm.get('file').value);\n    this.uploadservice.uploadImage(formRepoImage).subscribe(\n      (res) => console.log(res),\n      (err) => console.log(err)\n    );   \n  }\n  persistId(item){\n    const queryImage = new FormData();  \n    queryImage.append('file', this.uploadForm.get('file').value);\n    //console.log(this.imageForm);\n    console.log(this.queryId);\n    var qId = this.queryId;\n    this.uploadservice.persistQueryObj(item,qId).subscribe(res =>{\n    var matchedImages = res;      \n    })\n  }\n  displayChart(item) {\n    this.description= `The selected image matches ${item.color} percentage with color, shape and texture of the query image.`\n    console.log(item)\n    HighCharts.chart('pieChart', {\n      chart: {\n        plotBackgroundColor: null,\n        plotBorderWidth: null,\n        plotShadow: false,\n        type: 'pie'\n      },\n      title: {\n        text: 'Feature 1 Contribution'\n      },\n      tooltip: {\n        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n      },\n      plotOptions: {\n        pie: {\n          allowPointSelect: true,\n          cursor: 'pointer',\n          dataLabels: {\n            enabled: true,\n            format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n          }\n        }\n      },\n      series: [{\n        name: 'Color, Shape and Texture',\n        colorByPoint: true,\n        type: undefined,\n        data: [{\n          name: 'Similarity',\n          y: parseFloat(item.color),\n          sliced: true,\n          selected: true\n        }, {\n          name: 'Dissimiarity',\n          y: parseFloat(item.fg)\n        }]\n      }]\n    });\n  }\n}\n\n","<div class=\"height100\">\n  <form [formGroup] = \"uploadForm\" enctype=\"multipart/form-data\">\n    <div class=\"header\">\n      <div class=\"label-group\">\n        <div class=\"header-label\">\n          Content based Image Search\n        </div>\n        <div class=\"sub-header-label\">\n          Powered by Explainable AI\n        </div>\n      </div>\n      <div class=\"search-outer\">\n        <div class=\"search-container box-shadow\">\n          <div>\n            <img src=\"/assets/images/search.svg\" alt=\"search\" />\n          </div>\n          <div *ngFor=\"let image of uploadedImages\"  class=\"image-items \">\n             {{image}}\n          </div>          \n          <div class=\"btn-group\">\n            <div class=\"input-container\">\n              <input type=\"file\" name=\"file\" (change)=\"fileChange($event)\" id=\"file\" multiple accept=\"image/*\" class=\"file-input\">\n              <label for=\"file\"><img src=\"/assets/images/upload.svg\"/></label> \n            </div>\n            <button class=\"search-btn\"  (click)=\"runscript()\">Search</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n</form>\n  <!-- <div>\n    Show Image results based on search\n  </div> -->\n  <div class=\"results-count\">\n    <div class=\"count-circle\"> {{resultsCount || 0}}  </div>matching results.\n  </div>\n  <div class=\"row-info\" *ngIf=\"jsonImageObj.length\">\n    Below images are based on color, shape and texture.\n  </div>\n  <div class=\"results-container\">\n  <div class=\"image-row\">\n    <div *ngFor=\"let item of jsonImageObj\" class=\"image-item box-shadow\">\n   <div class=\"image\" [style.background-image]=\"'url(static/'+item.name+')'\"> </div>\n      <!--<div class=\"image\" [style.background-image]=\"'url(static/'+item.name+')'\"> </div> -->\n      <div class=\"image-button\">\n        <!-- <input  type=\"button\" value=\"Explain\" class=\"btn btn-primary btn-block explain-btn\" (click)=\"displayChart(item);\"> -->\n        <!-- Uncomment below code when mongo as the repository metadata so that it can call persist query -->\n        <input  type=\"button\" value=\"Explain\" class=\"btn btn-primary btn-block explain-btn\" (click)=\"displayChart(item);persistId(item)\">\n        <div class=\"circles\">\n          <div> </div>\n          <div> </div>\n          <div> </div>  \n        </div>\n      </div>\n    </div> \n  </div>\n  <div class=\"image-desc box-shadow\" *ngIf=\"jsonImageObj.length\">\n    <div class=\"desc-label\">Image description</div><br/>\n   <div class=\"description\">\n      {{description}}\n    </div>\n      <div class=\"chart-container\" id=\"pieChart\"></div>\n    </div>\n    </div>\n</div>\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n//import { HighchartsChartComponent } from 'highcharts-angular';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { Routes,RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,    \n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploadserviceService {\n  constructor(private http: HttpClient) {\n    \n  }\n  uploadImage(formData){\n    return this.http.post<any>('fileupload', formData)\n  }\n  getImages(){\n    return this.http.get('lists',{});\n  }\n  runscript(formData){\n    return this.http.post<any>('runscript',formData,{observe:\"response\", responseType: 'json'});\n\n  }\n  persistQueryObj(repoImg,qid){\n    var queryRepoList = []\n    queryRepoList.push(qid)\n    queryRepoList.push(repoImg)\n    return this.http.post<any>('persistQueryObj', queryRepoList)\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}